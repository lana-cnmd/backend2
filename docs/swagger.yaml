basePath: /api/v1
definitions:
  handlers.getAllClientsResponse:
    description: Clients list response container
    properties:
      data:
        items:
          $ref: '#/definitions/types.SearchClientResponse'
        type: array
    type: object
  handlers.getAllProductsResponse:
    description: Product list response container
    properties:
      data:
        items:
          $ref: '#/definitions/types.GetProductResponce'
        type: array
    type: object
  handlers.myError:
    description: Error response object
    properties:
      message:
        type: string
    type: object
  types.CreateClientRequest:
    description: Client creation request object
    properties:
      birthday:
        $ref: '#/definitions/types.CustomTime'
      city:
        type: string
      client_name:
        type: string
      client_surname:
        type: string
      country:
        type: string
      gender:
        type: string
      street:
        type: string
    type: object
  types.CreateProductRequest:
    description: Product creation request object
    properties:
      available_stock:
        description: число закупленных экземпляров товара
        type: integer
      category:
        type: string
      image_id:
        type: string
      name:
        type: string
      price:
        type: number
      supplier_id:
        type: integer
    type: object
  types.CustomTime:
    properties:
      time:
        type: string
    type: object
  types.GetProductResponce:
    description: Product details response object
    properties:
      available_stock:
        description: число закупленных экземпляров товара
        type: integer
      category:
        type: string
      image_id:
        type: string
      last_update_date:
        description: число последней закупки
        type: string
      name:
        type: string
      price:
        type: number
      supplier_id:
        type: integer
    type: object
  types.SearchClientResponse:
    description: Client details response object
    properties:
      birthday:
        type: string
      city:
        type: string
      client_name:
        type: string
      client_surname:
        type: string
      country:
        type: string
      gender:
        type: string
      registration_date:
        type: string
      street:
        type: string
    type: object
  types.SupplierDTO:
    description: Supplier data transfer object
    properties:
      city:
        type: string
      country:
        type: string
      name:
        type: string
      phone_number:
        type: string
      street:
        type: string
    type: object
  types.UpdateAddressInput:
    description: Address update request object (supports partial updates)
    properties:
      city:
        type: string
      country:
        type: string
      street:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is the API documentation for the Shop application.
  title: Shop API Documentation
  version: "1.0"
paths:
  /api/v1/clients:
    get:
      consumes:
      - application/json
      description: Returns a list of all clients with optional pagination (limit/offset)
      parameters:
      - description: Number of clients per page
        in: query
        name: limit
        type: integer
      - description: Skip first N clients
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of clients
          schema:
            $ref: '#/definitions/handlers.getAllClientsResponse'
        "400":
          description: '{''message'': ''Invalid limit/offset values''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Failed to retrieve clients''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Get all clients
      tags:
      - clients
    post:
      consumes:
      - application/json
      description: Creates a client with the provided personal details and returns
        its ID
      parameters:
      - description: Client details
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/types.CreateClientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{''id'': 123}'
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: '{''message'': ''Invalid request body''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Failed to create client''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Create a new client
      tags:
      - clients
  /api/v1/clients/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a client from the database by their ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{''Status'': ''ok''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{''message'': ''Invalid client ID''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Client not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Failed to delete client''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Delete a client
      tags:
      - clients
  /api/v1/clients/{id}/address:
    put:
      consumes:
      - application/json
      description: Partially updates the address details of a client by their ID (at
        least one field must be provided)
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: integer
      - description: New address details (at least one field required)
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.UpdateAddressInput'
      produces:
      - application/json
      responses:
        "200":
          description: '{''Status'': ''ok''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{''message'': ''Invalid request parameters''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Client not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Internal server error''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Update client's address
      tags:
      - clients
  /api/v1/clients/search:
    get:
      consumes:
      - application/json
      description: Finds a client by their first and last name
      parameters:
      - description: Client's first name
        in: query
        name: first_name
        required: true
        type: string
      - description: Client's last name
        in: query
        name: last_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Client details
          schema:
            $ref: '#/definitions/types.SearchClientResponse'
        "400":
          description: '{''message'': ''empty first or last name''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Client not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Internal server error''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Search client by name
      tags:
      - clients
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: Returns a list of all products available in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            $ref: '#/definitions/handlers.getAllProductsResponse'
        "500":
          description: '{''message'': ''Failed to retrieve products''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a product with the provided details and returns its ID
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/types.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{''id'': 123}'
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: '{''message'': ''Invalid request body''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Failed to create product''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Create a new product
      tags:
      - products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a product from the database by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{''Status'': ''ok''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{''message'': ''Invalid product ID''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Product not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Internal server error''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrieves a product's information by its unique identifier
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/types.GetProductResponce'
        "400":
          description: '{''message'': ''Invalid product ID''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Product not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Internal server error''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Get product details by ID
      tags:
      - products
  /api/v1/products/{id}/decrease-amount:
    put:
      consumes:
      - application/json
      description: Reduces the available stock of a product by a specified amount
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Amount to decrease (minimum 1)
        in: body
        name: decrease_amount
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{''message'': ''Product amount decreased successfully''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{''message'': ''Invalid request parameters''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Product not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "409":
          description: '{''message'': ''Not enough stock to decrease''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Internal server error''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Decrease product stock
      tags:
      - products
  /api/v1/suppliers:
    post:
      consumes:
      - application/json
      description: Adds a new supplier to the system with the provided details
      parameters:
      - description: Supplier details
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/types.SupplierDTO'
      produces:
      - application/json
      responses:
        "200":
          description: '{''id'': 123}'
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: '{''message'': ''Invalid request body''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Failed to create supplier''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Create a new supplier
      tags:
      - suppliers
  /api/v1/suppliers/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a supplier from the database by its ID
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{''Status'': ''ok''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{''message'': ''Invalid supplier ID''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Supplier not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Failed to delete supplier''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Delete a supplier
      tags:
      - suppliers
    get:
      consumes:
      - application/json
      description: Retrieves a supplier's information by its unique identifier
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Supplier details
          schema:
            $ref: '#/definitions/types.SupplierDTO'
        "400":
          description: '{''message'': ''Invalid supplier ID''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Supplier not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Internal server error''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Get supplier details by ID
      tags:
      - suppliers
  /api/v1/suppliers/{id}/address:
    put:
      consumes:
      - application/json
      description: Partially updates the address details of a supplier by their ID
        (at least one field required)
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      - description: New address details
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/types.UpdateAddressInput'
      produces:
      - application/json
      responses:
        "200":
          description: '{''Status'': ''ok''}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{''message'': ''Invalid request parameters''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "404":
          description: '{''message'': ''Supplier not found''}'
          schema:
            $ref: '#/definitions/handlers.myError'
        "500":
          description: '{''message'': ''Internal server error''}'
          schema:
            $ref: '#/definitions/handlers.myError'
      summary: Update supplier's address
      tags:
      - suppliers
swagger: "2.0"
